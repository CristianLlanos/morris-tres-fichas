(defun mensaje-1() (format t "~%~%Es tu turno:"))
(defun mensaje-2() (format t "~%********************************"))
(defun mensaje-3() (format t "~%"))
(defun mensaje-4() (format t "~%Escoge: "))
(defun mensaje-5() (format t "~%~%Selecciona tu ficha: "))

(defun opciones-movimientos ()
	(format t "~&Opciones de movimientos")
	(dotimes (contador 8 )
		(format t "~&[ ~s ] ~s"
	  		(+ contador 1)
			(case (+ contador 1)
				(1 'Izquierda)
				(2 'Derecha)
				(3 'Arriba)
				(4 'Abajo)
				(5 'Diagonal-a-derecha)
				(6 'Diagonal-a-izquierda)
				(7 'Diagonal-b-derecha)
				(8 'Diagonal-b-izquierda) ) ) ) )

(defun jugar()
	; Verficar si existe ganado e imprimir mensaje
	(estado-del-juego)
	(if *hayGanador* (progn (mostrar-tablero) (abort)))
	(mensaje-3)
	(mensaje-2)
	(format t "~&***JUEGO DE MORRIS - 3 FICHAS***")
	(mensaje-2)
	(mensaje-3)
	(mensaje-3)
	(mostrar-tablero)
	(let (
		(Indice NIL)
		(Movimiento NIL)
		(MovimientoRealizado NIL) )
		(progn
			(if (es-primera-fase-p)
				(progn
					; (mensaje-1)
					; (mensaje-3)
					(loop ; Verifica que su ficha cumpla las condiciones para ser puesta en el tablero
						(loop ; Verifica que la ficha seleccionada esté en el rango permitido
							(mensaje-1)
							(mensaje-3)
							(setq Indice (read))
							(when (and (> Indice 0) (< Indice 10)) (return))
							(format t "~%Vuelve a intentarlo :P~%")
							(mostrar-tablero) )
						(when (not (null (poner (coordenada Indice) *Humano*))) (return))
						(format t "~%Vuelve a intentarlo :P~%")
						(mostrar-tablero) ) )
				(progn
					(loop ; Verifica que su ficha cumpla las condiciones para ser puesta en el tablero
						(loop ; Verifica que la ficha seleccionada esté en el rango permitido
							(mensaje-5)
							(mensaje-3)
							(setq Indice (read))
							(when (and (> Indice 0) (< Indice 10)) (return))
							(format t "~%Vuelve a intentarlo :P~%")
							(mostrar-tablero) )
						(loop
							(opciones-movimientos)
							(mensaje-4)
							(mensaje-3)
							(setq Movimiento (read))
							(when (and (> Movimiento 0) (< Movimiento 9)) (return))
							(format t "~%Vuelve a intentarlo :P~%")
							(mostrar-tablero) )
						(cond
							( (eq Movimiento 1) (setq MovimientoRealizado (desplazar-izquierda (coordenada Indice) *Humano*)) )
							( (eq Movimiento 2) (setq MovimientoRealizado (desplazar-derecha (coordenada Indice) *Humano*)) )
							( (eq Movimiento 3) (setq MovimientoRealizado (desplazar-arriba (coordenada Indice) *Humano*)) )
							( (eq Movimiento 4) (setq MovimientoRealizado (desplazar-abajo (coordenada Indice) *Humano*)) )
							( (eq Movimiento 5) (setq MovimientoRealizado (desplazar-diagonal-a-derecha (coordenada Indice) *Humano*)) )
							( (eq Movimiento 6) (setq MovimientoRealizado (desplazar-diagonal-a-izquierda (coordenada Indice) *Humano*)) )
							( (eq Movimiento 7) (setq MovimientoRealizado (desplazar-diagonal-b-derecha (coordenada Indice) *Humano*)) )
							( (eq Movimiento 8) (setq MovimientoRealizado (desplazar-diagonal-b-izquierda (coordenada Indice) *Humano*)) ) )
						(when (not (NULL MovimientoRealizado)) (return))
						(format t "~%Vuelve a intentarlo :P~%")
						(mostrar-tablero) ) ) )
			(mensaje-3)
			(mostrar-tablero)
			(mensaje-3)
			(estado-del-juego)
			(if *hayGanador* (progn (mostrar-tablero) (abort)))
			(format t "~%Turno del ordenador:~%~%")
			(obtener-primero-mejor)
			(mostrar-tablero)
			(mensaje-3)
			(mensaje-2)
			(jugar) ) ) )

